Event details.jsx :

import React, { useEffect, useState, useCallback } from "react";
import { useParams, useNavigate } from "react-router-dom";
import eventService from "../services/eventService";
import rsvpService from "../services/rsvpService";
import { toast } from "react-toastify";
import ConfirmModal from "../components/ConfirmModal";


const EventDetails = () => {
  const { id } = useParams();
  const navigate = useNavigate();

  const [event, setEvent] = useState(null);
  const [loading, setLoading] = useState(true);
  const [hasRSVPed, setHasRSVPed] = useState(false);
  const [sessionUserId, setSessionUserId] = useState(null);
  const [isModalOpen, setModalOpen] = useState(false);
  const [isRSVPed, setIsRSVPed] = useState(false);
  const [loadingRSVPStatus, setLoadingRSVPStatus] = useState(true);


  // useCallback ensures function identity stability for useEffect dependencies
  const fetchEvent = useCallback(async () => {
    try {
      const res = await eventService.getEventById(id);
      setEvent(res.data);
      setHasRSVPed(res.data.hasRSVPed || false);
    } catch (err) {
      toast.error("Failed to load event.");
    } finally {
      setLoading(false);
    }
  }, [id]);

  const fetchSessionUser = useCallback(async () => {
    try {
      const res = await fetch("http://localhost:8080/api/auth/me", {
        credentials: "include",
      });
      if (res.ok) {
        const data = await res.json();
        setSessionUserId(data.id);
      }
    } catch (err) {
      console.error("Failed to fetch session user");
    }
  }, []);

  useEffect(() => {
    fetchEvent();
    fetchSessionUser();
  }, [fetchEvent, fetchSessionUser]);

  const handleRSVP = async () => {
    try {
      await rsvpService.rsvpToEvent(id);
      toast.success("RSVP successful!");
      setHasRSVPed(true);
      setEvent((prev) => ({
        ...prev,
        remainingSlots: prev.remainingSlots - 1,
      }));
    } catch (err) {
      toast.error("RSVP failed.");
    }
  };

  const handleUnRSVP = async () => {
    try {
      await rsvpService.unrsvpFromEvent(id);
      toast.success("RSVP removed.");
      setHasRSVPed(false);
      setEvent((prev) => ({
        ...prev,
        remainingSlots: prev.remainingSlots + 1,
      }));
    } catch (err) {
      toast.error("Un-RSVP failed.");
    }
  };

  const handleEdit = () => {
    navigate(`/edit-event/${id}`);
  };

  const handleDelete = async () => {
      try {
        await eventService.deleteEvent(id);
        toast.success("Event deleted successfully. Attendees notified.");
        navigate("/");
      } catch (error) {
        console.error("Delete error", error);
        toast.error(error.response?.data || "Failed to delete the event.");
      }
  };

  if (loading) return <div className="text-center mt-10">Loading event...</div>;
  if (!event) return <div className="text-center mt-10">Event not found.</div>;

  const isCreator = sessionUserId && event?.creatorId === sessionUserId;

  console.log("Session User ID:", sessionUserId);
  console.log("Event Creator ID:",event?.creatorId);

  return (
    <div className="max-w-2xl mx-auto mt-10 bg-white p-6 rounded-xl shadow-md">
      <h2 className="text-3xl font-bold mb-4">{event.title}</h2>
      <p className="text-gray-700 mb-2">{event.description}</p>
      <p className="text-gray-600">📅 Date: {event.date}</p>
      <p className="text-gray-600">📍 Location: {event.location}</p>
      <p className="text-gray-600">👥 Remaining Slots: {event.remainingSlots}</p>
      <p className="text-sm text-gray-600">Created by: {event?.creatorName}</p>

      <div className="mt-6 flex gap-4 flex-wrap">
        {hasRSVPed ? (
          <button
            className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-md"
            onClick={handleUnRSVP}
          >
            Cancel RSVP
          </button>
        ) : (
          <button
            className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md"
            onClick={handleRSVP}
          >
            RSVP Now
          </button>
        )}

       {isCreator && (
        <div className="flex gap-4 mt-4">
          <button
            onClick={handleEdit}
            className="bg-yellow-500 hover:bg-yellow-600 text-white px-4 py-2 rounded-md"
          >
            ✏️ Edit Event
          </button>
          <button
            onClick={() => setModalOpen(true)} // ⬅️ show modal
            className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-md"
          >
            🗑️ Delete Event
          </button>

        </div>
      )}

        
      </div>
      <ConfirmModal
          isOpen={isModalOpen}
          onClose={() => setModalOpen(false)}
          onConfirm={handleDelete}
          title="Delete Event?"
          message="Are you sure you want to delete this event? Attendees will be notified."
       />
    </div>
     
  );

};

export default EventDetails;
